function [p,ym,yl,ylm,ps,S,delta,confl] = suglms(x,y,f,def,flag,beta,deltath)
% SUGLMS estimates the consequent parameters in the Sugeno-Takagi model
%    using least squares.
%
% [P,Ym,Yl,Ylm,Ps,S,delta] = SUGLMS(X,Y,F,DEF,FLAG,BETA)
% Input:
%   X ..... input data matrix
%   Y ..... output data vector
%   F ..... fuzzy partition matrix (membership degrees),
%           optional, defaults to ones(size(y)) for
%           which SUGLMS is a standard linear regression
%   DEF ... default value returned when the sum of grades
%           equals to one (optional, defaults to 0)
%   FLAG .. set to 1 to get local weighted LMS estimates
%           set to 2 to use alg 1 for tradeoff
%           set to 3 to use alg 2 for tradeoff
%   BETA .. Weights on the individual models
%   DELTATH Parameter boundaries for local optimization (Alg.2)
%
%    
% Output:
%   P ..... consequents parameters for every cluster
%   Ym .... global model output for the given input data
%   Yl .... output of local submodels (corresponding to clusters)
%   Ylm ... output of local submodels with data corresponding to
%           degrees < 0.2 masked with NaN's (for plots)
%   S   ... matrix S for use with SUGVAL to produce error estimates on 
%           predictions. If the errors in the data, y, are independent 
%           normal with constant variance, SUGVAL will produce error 
%           bounds which contain at least 50% of the predictions.
%       
%   delta . error estimates for the identification data, y +/- delta 
%           contains at least 50% of the predictions.
%
%   Example:
%   x = (0:0.02:1)'; y = sin(7*x);
%       f = mgrade(x',mfequ(x,2,3))';
%       [p,ym,yl,ylm] = suglms([x ones(size(x))],y,f);
%   subplot(211); plot(x,ylm,'.',x,[y ym]); title('Fitting y = sin(7*x)')
%   subplot(212); plot(x,f); title('Membership functions')

%   (c) Robert Babuska, 1994-95; Koen Maertens 2002

if nargin < 5, flag = 0; end;                           % no flag supplied
if isempty(flag), flag = 0; end;
if nargin < 4, def = 0; end;                            % no default supplied
if isempty(def), def = 0; end;
if nargin < 3, f = ones(size(y)); end;                  % no memberships supplied
if isempty(f), f = ones(size(y)); end;
[mx,nx] = size(x);     % mx=number of datapoints, nx=number of inputs
[mf,nf] = size(f);     % mf=number of datapoints, nf=number of clusters/local models

if ((nargin<6)&(flag==0.5)), 
    beta=ones(nf,1);  % beta(i)=1 default value of local weights
end;

p = zeros(nf,nx); ps = p;
sumDOF = sum([zeros(1,mf);f'])';                        % sum of DOFs
sumDOF = sumDOF(:,ones(1,nf));
NoRule = (sumDOF == 0);                                   % no rule applicable
sumDOF = sumDOF + NoRule;                               % set zeros to one
x1 = zeros(mx,nf*nx);                   % auxilliary variables
xx = zeros(nx,nf*mx);                           % auxilliary variable
x = x'; f1 = x(:); xx(:) = f1(:,ones(1,nf));
f1 = x1;
x1(:) = xx';                                            % reshape data matrix

if nf == 1, flag = 1; end;

if flag == 0, 
    xx = f(:)./sumDOF(:); 
    f1(:) = xx(:,ones(1,nx));                    % reshape partition matrix
    x1 = f1.*x1;

    if nargout > 5,
        [Q,R]=qr(x1);                            % find LS solution
        p(:) = R\Q'*y;
    else
        p(:) = x1 \ y;                              % find LS solution
    end;

    if nargout > 1,                        % calculate model output
        yl = x'*p';                        % local models
        ym = x1*p(:) + def.*NoRule(:,1);   % global model
        ylm = yl;
        mask = find(f < 0.2);              % find membership degrees < 0.2
        ylm(mask) = NaN*ones(size(mask));  % mask them with NaN's for plots
    end;

    if nargout > 4,                        % STD of parameters
        df = mx - nf*nx;                   % degrees of freedom
        Rr = x1'*x1;
        r = y - ym;                        % residuals
        V=r'*r/df;
        M = V*inv(Rr);
        ps(:) = sqrt(diag(M))';
    end;

elseif flag==1, % flag = 1, weighted least squares

    for i = 1 : nf,                % calculate ith model
        f1 = f(:,i)*ones(1,nx);    % extract membership grades from fuzzy partition matrix
        x1 = sqrt(f1).*x';              
    
        if nargout > 5,
            [Q,R]=qr(x1);                          % find LS solution
            p(i,:) = (R\Q'*(sqrt(f(:,i)).*y))';
        else
            p(i,:) = (x1 \ (sqrt(f(:,i)).*y))';    % find LS solution
        end;
             
        if nargout > 1,                     % calculate model output
            yl(:,i) = x'*p(i,:)';                % local models
            ym(:,i) = yl(:,i);
            ylm(:,i) = yl(:,i);
            mask = find(f(:,i) < 0.2);           % find membership degrees < 0.2
            ylm(mask,i) = NaN*ones(size(mask));  % mask them with NaN's for plots
        end;

        if nargout > 4,                          % STD of parameters
            df = mx - nf*nx;                     % degrees of freedom
            Rr = x1'*x1;
            r = sqrt(f(:,i)).*y - x1*p(i,:)';    % residuals
            V=r'*r/df;
            M = V*inv(Rr);
            ps(i,:) = sqrt(diag(M))';
        end;
    end; % of ith model
elseif flag==2,
    
    % Global LS 
    Psi=[];
    for i=1:nf,
      Psi=[Psi (f(:,i)*ones(1,nx)).*x'];
    end;
    HG=Psi'*Psi/mx;
    fTG=-y'*Psi/mx;
      
    % Locally Weighted LS
    HL=zeros(nf*nx);
    fTL=zeros(1,nf*nx);
    for i=1:nf,
       Wi=beta(i)*f(:,i)*ones(1,nx);
       HL(1+(i-1)*nx:i*nx,1+(i-1)*nx:i*nx)=x*(Wi.*x')/mx;
       fTL(1,1+(i-1)*nx:i*nx)=-y'*(Wi.*x')/mx;
    end;
   
    A=[]; b=[];        % Matrix Inequality constraint
    Aeq=[]; beq=[];    % Matrix Equality constraint
    lb=[]; ub=[];      % Boundaries on estimated parameter
    p0=[];             % Initial parameter set
       
    OPTIONS=optimset('LargeScale','off');
        
    H=HL+HG;
    fT=fTL+fTG;
    [popt,fval,exitflag,output,lambda]=quadprog(H,fT',A,b,Aeq,beq,lb,ub,p0,OPTIONS);
    dVopt=HG*popt+fTG';
    for i=1:nf,
      p(i,:)=(popt(1+(i-1)*nx:i*nx))';
      confl(i,:)=-(dVopt(1+(i-1)*nx:i*nx))';
    end;
         
    if nargout > 1,           % calculate model output
        yl = x'*p';           % local models
        ym = x'*p';           % global model
        ylm = yl;
        mask = find(f < 0.2);                % find membership degrees < 0.2
        ylm(mask) = NaN*ones(size(mask));    % mask them with NaN's for plots
    end;

    % Fill not calculated outputs
    Ps=[];
    S=[];
    delta=[];
elseif flag ==3,
     % Locally weighted LS  
     popt=NaN*zeros((nx+1)*nf,1);
     for i = 1 : nf,               % calculate ith model
        f1 = f(:,i)*ones(1,nx);    % extract membership grades from fuzzy partition matrix
        x1 = sqrt(f1).*x';              
    
        if nargout > 5,
            [Q,R]=qr(x1);                          % find LS solution
            popt(1+(i-1)*nx:i*nx) = (R\Q'*(sqrt(f(:,i)).*y));
        else
            popt(1+(i-1)*nx:i*nx) = (x1 \ (sqrt(f(:,i)).*y));    % find LS solution
        end;
     end; % of ith model
     
     lambdas=zeros(size(popt));
     for i=1:nf,
       p(i,:)=(popt(1+(i-1)*nx:i*nx))';
       confl(i,:)=lambdas(1+(i-1)*nx:i*nx)';
     end;
      
     if nargout > 1,           % calculate model output
         yl = x'*p';           % local models
         ym = x'*p';           % global model
         ylm = yl;
         mask = find(f < 0.2);                % find membership degrees < 0.2
         ylm(mask) = NaN*ones(size(mask));    % mask them with NaN's for plots
     end;   
     % Fill not calculated outputs
     Ps=[];
     S=[];
     delta=[];
end; 

%if nargout > 5,                              % make S for error bounds
%  S = [R(1:nf*nx,:); ...
%      [df zeros(1,nf*nx-1)]; ...
%      [norm(r) zeros(1,nf*nx-1)]];           % construct S as in polyfit
%end;

%if nargout > 6,                              % evaluate error bounds
%  E = x1/R;
%  e = sqrt(1+sum((E.*E)')');
%  if df == 0
%      disp('Warning: zero degrees of freedom implies infinite error bounds.')
%      delta = Inf*e;
%  else
%      delta = norm(r)/sqrt(df)*e;
%  end
%end;
